use std::borrow::Cow;

use bevy::{prelude::Color, utils::HashMap};
use lazy_static::lazy_static;

type Colors = HashMap<Cow<'static, str>, HashMap<Cow<'static, str>, [u8; 4]>>;

lazy_static! {
    static ref COLORS: Colors = {
        let mut colors = Colors::new();
        insert_default_colors(&mut colors);
        colors
    };
}

pub fn insert_default_colors(colors: &mut Colors) {
    colors.insert(
        "slate".into(),
        vec![
            ("50".into(), [248, 250, 252, 255]),
            ("100".into(), [241, 245, 249, 255]),
            ("200".into(), [226, 232, 240, 255]),
            ("300".into(), [203, 213, 225, 255]),
            ("400".into(), [148, 163, 184, 255]),
            ("500".into(), [100, 116, 139, 255]),
            ("600".into(), [71, 85, 105, 255]),
            ("700".into(), [51, 65, 85, 255]),
            ("800".into(), [30, 41, 59, 255]),
            ("900".into(), [15, 23, 42, 255]),
            ("950".into(), [2, 6, 23, 255]),
        ]
        .into_iter()
        .collect(),
    );
    colors.insert(
        "gray".into(),
        vec![
            ("50".into(), [249, 250, 251, 255]),
            ("100".into(), [243, 244, 246, 255]),
            ("200".into(), [229, 231, 235, 255]),
            ("300".into(), [209, 213, 219, 255]),
            ("400".into(), [156, 163, 175, 255]),
            ("500".into(), [107, 114, 128, 255]),
            ("600".into(), [75, 85, 99, 255]),
            ("700".into(), [55, 65, 81, 255]),
            ("800".into(), [31, 41, 55, 255]),
            ("900".into(), [17, 24, 39, 255]),
            ("950".into(), [3, 7, 18, 255]),
        ]
        .into_iter()
        .collect(),
    );
    colors.insert(
        "zinc".into(),
        vec![
            ("50".into(), [250, 250, 250, 255]),
            ("100".into(), [244, 244, 245, 255]),
            ("200".into(), [228, 228, 231, 255]),
            ("300".into(), [212, 212, 216, 255]),
            ("400".into(), [161, 161, 170, 255]),
            ("500".into(), [113, 113, 122, 255]),
            ("600".into(), [82, 82, 91, 255]),
            ("700".into(), [63, 63, 70, 255]),
            ("800".into(), [39, 39, 42, 255]),
            ("900".into(), [24, 24, 27, 255]),
            ("950".into(), [9, 9, 11, 255]),
        ]
        .into_iter()
        .collect(),
    );
    colors.insert(
        "neutral".into(),
        vec![
            ("50".into(), [250, 250, 250, 255]),
            ("100".into(), [245, 245, 245, 255]),
            ("200".into(), [229, 229, 229, 255]),
            ("300".into(), [212, 212, 212, 255]),
            ("400".into(), [163, 163, 163, 255]),
            ("500".into(), [115, 115, 115, 255]),
            ("600".into(), [82, 82, 82, 255]),
            ("700".into(), [64, 64, 64, 255]),
            ("800".into(), [38, 38, 38, 255]),
            ("900".into(), [23, 23, 23, 255]),
            ("950".into(), [10, 10, 10, 255]),
        ]
        .into_iter()
        .collect(),
    );
    colors.insert(
        "stone".into(),
        vec![
            ("50".into(), [250, 250, 249, 255]),
            ("100".into(), [245, 245, 244, 255]),
            ("200".into(), [231, 229, 228, 255]),
            ("300".into(), [214, 211, 209, 255]),
            ("400".into(), [168, 162, 158, 255]),
            ("500".into(), [120, 113, 108, 255]),
            ("600".into(), [87, 83, 78, 255]),
            ("700".into(), [68, 64, 60, 255]),
            ("800".into(), [41, 37, 36, 255]),
            ("900".into(), [28, 25, 23, 255]),
            ("950".into(), [12, 10, 9, 255]),
        ]
        .into_iter()
        .collect(),
    );
    colors.insert(
        "red".into(),
        vec![
            ("50".into(), [254, 242, 242, 255]),
            ("100".into(), [254, 226, 226, 255]),
            ("200".into(), [254, 202, 202, 255]),
            ("300".into(), [252, 165, 165, 255]),
            ("400".into(), [248, 113, 113, 255]),
            ("500".into(), [239, 68, 68, 255]),
            ("600".into(), [220, 38, 38, 255]),
            ("700".into(), [185, 28, 28, 255]),
            ("800".into(), [153, 27, 27, 255]),
            ("900".into(), [127, 29, 29, 255]),
            ("950".into(), [69, 10, 10, 255]),
        ]
        .into_iter()
        .collect(),
    );
    colors.insert(
        "orange".into(),
        vec![
            ("50".into(), [255, 247, 237, 255]),
            ("100".into(), [255, 237, 213, 255]),
            ("200".into(), [254, 215, 170, 255]),
            ("300".into(), [253, 186, 116, 255]),
            ("400".into(), [251, 146, 60, 255]),
            ("500".into(), [249, 115, 22, 255]),
            ("600".into(), [234, 88, 12, 255]),
            ("700".into(), [194, 65, 12, 255]),
            ("800".into(), [154, 52, 18, 255]),
            ("900".into(), [124, 45, 18, 255]),
            ("950".into(), [67, 20, 7, 255]),
        ]
        .into_iter()
        .collect(),
    );
    colors.insert(
        "amber".into(),
        vec![
            ("50".into(), [255, 251, 235, 255]),
            ("100".into(), [254, 243, 199, 255]),
            ("200".into(), [253, 230, 138, 255]),
            ("300".into(), [252, 211, 77, 255]),
            ("400".into(), [251, 191, 36, 255]),
            ("500".into(), [245, 158, 11, 255]),
            ("600".into(), [217, 119, 6, 255]),
            ("700".into(), [180, 83, 9, 255]),
            ("800".into(), [146, 64, 14, 255]),
            ("900".into(), [120, 53, 15, 255]),
            ("950".into(), [69, 26, 3, 255]),
        ]
        .into_iter()
        .collect(),
    );
    colors.insert(
        "yellow".into(),
        vec![
            ("50".into(), [254, 252, 232, 255]),
            ("100".into(), [254, 249, 195, 255]),
            ("200".into(), [254, 240, 138, 255]),
            ("300".into(), [253, 224, 71, 255]),
            ("400".into(), [250, 204, 21, 255]),
            ("500".into(), [234, 179, 8, 255]),
            ("600".into(), [202, 138, 4, 255]),
            ("700".into(), [161, 98, 7, 255]),
            ("800".into(), [133, 77, 14, 255]),
            ("900".into(), [113, 63, 18, 255]),
            ("950".into(), [66, 32, 6, 255]),
        ]
        .into_iter()
        .collect(),
    );
    colors.insert(
        "lime".into(),
        vec![
            ("50".into(), [247, 254, 231, 255]),
            ("100".into(), [236, 252, 203, 255]),
            ("200".into(), [217, 249, 157, 255]),
            ("300".into(), [190, 242, 100, 255]),
            ("400".into(), [163, 230, 53, 255]),
            ("500".into(), [132, 204, 22, 255]),
            ("600".into(), [101, 163, 13, 255]),
            ("700".into(), [77, 124, 15, 255]),
            ("800".into(), [63, 98, 18, 255]),
            ("900".into(), [54, 83, 20, 255]),
            ("950".into(), [26, 46, 5, 255]),
        ]
        .into_iter()
        .collect(),
    );
    colors.insert(
        "green".into(),
        vec![
            ("50".into(), [240, 253, 244, 255]),
            ("100".into(), [220, 252, 231, 255]),
            ("200".into(), [187, 247, 208, 255]),
            ("300".into(), [134, 239, 172, 255]),
            ("400".into(), [74, 222, 128, 255]),
            ("500".into(), [34, 197, 94, 255]),
            ("600".into(), [22, 163, 74, 255]),
            ("700".into(), [21, 128, 61, 255]),
            ("800".into(), [22, 101, 52, 255]),
            ("900".into(), [20, 83, 45, 255]),
            ("950".into(), [5, 46, 22, 255]),
        ]
        .into_iter()
        .collect(),
    );
    colors.insert(
        "emerald".into(),
        vec![
            ("50".into(), [236, 253, 245, 255]),
            ("100".into(), [209, 250, 229, 255]),
            ("200".into(), [167, 243, 208, 255]),
            ("300".into(), [110, 231, 183, 255]),
            ("400".into(), [52, 211, 153, 255]),
            ("500".into(), [16, 185, 129, 255]),
            ("600".into(), [5, 150, 105, 255]),
            ("700".into(), [4, 120, 87, 255]),
            ("800".into(), [6, 95, 70, 255]),
            ("900".into(), [6, 78, 59, 255]),
            ("950".into(), [2, 44, 34, 255]),
        ]
        .into_iter()
        .collect(),
    );
    colors.insert(
        "teal".into(),
        vec![
            ("50".into(), [240, 253, 250, 255]),
            ("100".into(), [204, 251, 241, 255]),
            ("200".into(), [153, 246, 228, 255]),
            ("300".into(), [94, 234, 212, 255]),
            ("400".into(), [45, 212, 191, 255]),
            ("500".into(), [20, 184, 166, 255]),
            ("600".into(), [13, 148, 136, 255]),
            ("700".into(), [15, 118, 110, 255]),
            ("800".into(), [17, 94, 89, 255]),
            ("900".into(), [19, 78, 74, 255]),
            ("950".into(), [4, 47, 46, 255]),
        ]
        .into_iter()
        .collect(),
    );
    colors.insert(
        "cyan".into(),
        vec![
            ("50".into(), [236, 254, 255, 255]),
            ("100".into(), [207, 250, 254, 255]),
            ("200".into(), [165, 243, 252, 255]),
            ("300".into(), [103, 232, 249, 255]),
            ("400".into(), [34, 211, 238, 255]),
            ("500".into(), [6, 182, 212, 255]),
            ("600".into(), [8, 145, 178, 255]),
            ("700".into(), [14, 116, 144, 255]),
            ("800".into(), [21, 94, 117, 255]),
            ("900".into(), [22, 78, 99, 255]),
            ("950".into(), [8, 51, 68, 255]),
        ]
        .into_iter()
        .collect(),
    );
    colors.insert(
        "sky".into(),
        vec![
            ("50".into(), [240, 249, 255, 255]),
            ("100".into(), [224, 242, 254, 255]),
            ("200".into(), [186, 230, 253, 255]),
            ("300".into(), [125, 211, 252, 255]),
            ("400".into(), [56, 189, 248, 255]),
            ("500".into(), [14, 165, 233, 255]),
            ("600".into(), [2, 132, 199, 255]),
            ("700".into(), [3, 105, 161, 255]),
            ("800".into(), [7, 89, 133, 255]),
            ("900".into(), [12, 74, 110, 255]),
            ("950".into(), [8, 47, 73, 255]),
        ]
        .into_iter()
        .collect(),
    );
    colors.insert(
        "blue".into(),
        vec![
            ("50".into(), [239, 246, 255, 255]),
            ("100".into(), [219, 234, 254, 255]),
            ("200".into(), [191, 219, 254, 255]),
            ("300".into(), [147, 197, 253, 255]),
            ("400".into(), [96, 165, 250, 255]),
            ("500".into(), [59, 130, 246, 255]),
            ("600".into(), [37, 99, 235, 255]),
            ("700".into(), [29, 78, 216, 255]),
            ("800".into(), [30, 64, 175, 255]),
            ("900".into(), [30, 58, 138, 255]),
            ("950".into(), [23, 37, 84, 255]),
        ]
        .into_iter()
        .collect(),
    );
    colors.insert(
        "indigo".into(),
        vec![
            ("50".into(), [238, 242, 255, 255]),
            ("100".into(), [224, 231, 255, 255]),
            ("200".into(), [199, 210, 254, 255]),
            ("300".into(), [165, 180, 252, 255]),
            ("400".into(), [129, 140, 248, 255]),
            ("500".into(), [99, 102, 241, 255]),
            ("600".into(), [79, 70, 229, 255]),
            ("700".into(), [67, 56, 202, 255]),
            ("800".into(), [55, 48, 163, 255]),
            ("900".into(), [49, 46, 129, 255]),
            ("950".into(), [30, 27, 75, 255]),
        ]
        .into_iter()
        .collect(),
    );
    colors.insert(
        "violet".into(),
        vec![
            ("50".into(), [245, 243, 255, 255]),
            ("100".into(), [237, 233, 254, 255]),
            ("200".into(), [221, 214, 254, 255]),
            ("300".into(), [196, 181, 253, 255]),
            ("400".into(), [167, 139, 250, 255]),
            ("500".into(), [139, 92, 246, 255]),
            ("600".into(), [124, 58, 237, 255]),
            ("700".into(), [109, 40, 217, 255]),
            ("800".into(), [91, 33, 182, 255]),
            ("900".into(), [76, 29, 149, 255]),
            ("950".into(), [46, 16, 101, 255]),
        ]
        .into_iter()
        .collect(),
    );
    colors.insert(
        "purple".into(),
        vec![
            ("50".into(), [250, 245, 255, 255]),
            ("100".into(), [243, 232, 255, 255]),
            ("200".into(), [233, 213, 255, 255]),
            ("300".into(), [216, 180, 254, 255]),
            ("400".into(), [192, 132, 252, 255]),
            ("500".into(), [168, 85, 247, 255]),
            ("600".into(), [147, 51, 234, 255]),
            ("700".into(), [126, 34, 206, 255]),
            ("800".into(), [107, 33, 168, 255]),
            ("900".into(), [88, 28, 135, 255]),
            ("950".into(), [59, 7, 100, 255]),
        ]
        .into_iter()
        .collect(),
    );
    colors.insert(
        "fuchsia".into(),
        vec![
            ("50".into(), [253, 244, 255, 255]),
            ("100".into(), [250, 232, 255, 255]),
            ("200".into(), [245, 208, 254, 255]),
            ("300".into(), [240, 171, 252, 255]),
            ("400".into(), [232, 121, 249, 255]),
            ("500".into(), [217, 70, 239, 255]),
            ("600".into(), [192, 38, 211, 255]),
            ("700".into(), [162, 28, 175, 255]),
            ("800".into(), [134, 25, 143, 255]),
            ("900".into(), [112, 26, 117, 255]),
            ("950".into(), [74, 4, 78, 255]),
        ]
        .into_iter()
        .collect(),
    );
    colors.insert(
        "pink".into(),
        vec![
            ("50".into(), [253, 242, 248, 255]),
            ("100".into(), [252, 231, 243, 255]),
            ("200".into(), [251, 207, 232, 255]),
            ("300".into(), [249, 168, 212, 255]),
            ("400".into(), [244, 114, 182, 255]),
            ("500".into(), [236, 72, 153, 255]),
            ("600".into(), [219, 39, 119, 255]),
            ("700".into(), [190, 24, 93, 255]),
            ("800".into(), [157, 23, 77, 255]),
            ("900".into(), [131, 24, 67, 255]),
            ("950".into(), [80, 7, 36, 255]),
        ]
        .into_iter()
        .collect(),
    );
    colors.insert(
        "rose".into(),
        vec![
            ("50".into(), [255, 241, 242, 255]),
            ("100".into(), [255, 228, 230, 255]),
            ("200".into(), [254, 205, 211, 255]),
            ("300".into(), [253, 164, 175, 255]),
            ("400".into(), [251, 113, 133, 255]),
            ("500".into(), [244, 63, 94, 255]),
            ("600".into(), [225, 29, 72, 255]),
            ("700".into(), [190, 18, 60, 255]),
            ("800".into(), [159, 18, 57, 255]),
            ("900".into(), [136, 19, 55, 255]),
            ("950".into(), [76, 5, 25, 255]),
        ]
        .into_iter()
        .collect(),
    );
}

pub fn parse_color(class: &str) -> Option<Color> {
    // Split the class into components
    let components: Vec<&str> = class.split('/').collect();
    let color_and_variant: Vec<&str> = components[0].split('-').collect();

    // If there's an alpha channel specified, get it
    let alpha = if components.len() > 1 {
        match components[1].parse::<u16>() {
            // convert from 100 to 255k
            Ok(a) => (a * 255 / 100) as u8,
            Err(_) => return None, // Invalid alpha
        }
    } else {
        255 // Default alpha
    };

    // Handle special colors
    if color_and_variant.len() == 1 {
        return match color_and_variant[0] {
            "transparent" => Some(Color::rgba_u8(0, 0, 0, 0)),
            "white" => Some(Color::rgba_u8(255, 255, 255, alpha)),
            "black" => Some(Color::rgba_u8(0, 0, 0, alpha)),
            _ => COLORS.get(color_and_variant[0]).map(|c| {
                let (_, variant) = c.iter().next().unwrap();
                Color::rgba_u8(variant[0], variant[1], variant[2], alpha)
            }),
        };
    }

    // Handle regular colors
    let color = color_and_variant[0];
    let variant = color_and_variant[1];

    COLORS.get(color).and_then(|variants| {
        variants
            .get(variant)
            .map(|&[r, g, b, _]| Color::rgba_u8(r, g, b, alpha))
    })
}
